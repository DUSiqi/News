{"ast":null,"code":"import React, { Component } from 'react';\nimport 'memoize-one';\nimport '@emotion/core';\nimport 'react-dom';\nimport 'prop-types';\nimport { k as handleInputChange } from '../../dist/utils-06b0d5a4.browser.esm.js';\nimport '../../dist/index-4322c0ed.browser.esm.js';\nimport { S as Select } from '../../dist/Select-9fdb8cd0.browser.esm.js';\nimport '@emotion/css';\nimport 'react-input-autosize';\nimport { m as manageState } from '../../dist/stateManager-04f734a2.browser.esm.js';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nvar defaultProps = {\n  cacheOptions: false,\n  defaultOptions: false,\n  filterOption: null,\n  isLoading: false\n};\n\nvar makeAsyncSelect = function makeAsyncSelect(SelectComponent) {\n  var _class, _temp;\n\n  return _temp = _class = /*#__PURE__*/function (_Component) {\n    _inheritsLoose(Async, _Component);\n\n    function Async(props) {\n      var _this;\n\n      _this = _Component.call(this) || this;\n      _this.select = void 0;\n      _this.lastRequest = void 0;\n      _this.mounted = false;\n      _this.optionsCache = {};\n\n      _this.handleInputChange = function (newValue, actionMeta) {\n        var _this$props = _this.props,\n            cacheOptions = _this$props.cacheOptions,\n            onInputChange = _this$props.onInputChange; // TODO\n\n        var inputValue = handleInputChange(newValue, actionMeta, onInputChange);\n\n        if (!inputValue) {\n          delete _this.lastRequest;\n\n          _this.setState({\n            inputValue: '',\n            loadedInputValue: '',\n            loadedOptions: [],\n            isLoading: false,\n            passEmptyOptions: false\n          });\n\n          return;\n        }\n\n        if (cacheOptions && _this.optionsCache[inputValue]) {\n          _this.setState({\n            inputValue: inputValue,\n            loadedInputValue: inputValue,\n            loadedOptions: _this.optionsCache[inputValue],\n            isLoading: false,\n            passEmptyOptions: false\n          });\n        } else {\n          var request = _this.lastRequest = {};\n\n          _this.setState({\n            inputValue: inputValue,\n            isLoading: true,\n            passEmptyOptions: !_this.state.loadedInputValue\n          }, function () {\n            _this.loadOptions(inputValue, function (options) {\n              if (!_this.mounted) return;\n\n              if (options) {\n                _this.optionsCache[inputValue] = options;\n              }\n\n              if (request !== _this.lastRequest) return;\n              delete _this.lastRequest;\n\n              _this.setState({\n                isLoading: false,\n                loadedInputValue: inputValue,\n                loadedOptions: options || [],\n                passEmptyOptions: false\n              });\n            });\n          });\n        }\n\n        return inputValue;\n      };\n\n      _this.state = {\n        defaultOptions: Array.isArray(props.defaultOptions) ? props.defaultOptions : undefined,\n        inputValue: typeof props.inputValue !== 'undefined' ? props.inputValue : '',\n        isLoading: props.defaultOptions === true,\n        loadedOptions: [],\n        passEmptyOptions: false\n      };\n      return _this;\n    }\n\n    var _proto = Async.prototype;\n\n    _proto.componentDidMount = function componentDidMount() {\n      var _this2 = this;\n\n      this.mounted = true;\n      var defaultOptions = this.props.defaultOptions;\n      var inputValue = this.state.inputValue;\n\n      if (defaultOptions === true) {\n        this.loadOptions(inputValue, function (options) {\n          if (!_this2.mounted) return;\n          var isLoading = !!_this2.lastRequest;\n\n          _this2.setState({\n            defaultOptions: options || [],\n            isLoading: isLoading\n          });\n        });\n      }\n    };\n\n    _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {\n      // if the cacheOptions prop changes, clear the cache\n      if (nextProps.cacheOptions !== this.props.cacheOptions) {\n        this.optionsCache = {};\n      }\n\n      if (nextProps.defaultOptions !== this.props.defaultOptions) {\n        this.setState({\n          defaultOptions: Array.isArray(nextProps.defaultOptions) ? nextProps.defaultOptions : undefined\n        });\n      }\n    };\n\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      this.mounted = false;\n    };\n\n    _proto.focus = function focus() {\n      this.select.focus();\n    };\n\n    _proto.blur = function blur() {\n      this.select.blur();\n    };\n\n    _proto.loadOptions = function loadOptions(inputValue, callback) {\n      var loadOptions = this.props.loadOptions;\n      if (!loadOptions) return callback();\n      var loader = loadOptions(inputValue, callback);\n\n      if (loader && typeof loader.then === 'function') {\n        loader.then(callback, function () {\n          return callback();\n        });\n      }\n    };\n\n    _proto.render = function render() {\n      var _this3 = this;\n\n      var _this$props2 = this.props,\n          loadOptions = _this$props2.loadOptions,\n          isLoadingProp = _this$props2.isLoading,\n          props = _objectWithoutPropertiesLoose(_this$props2, [\"loadOptions\", \"isLoading\"]);\n\n      var _this$state = this.state,\n          defaultOptions = _this$state.defaultOptions,\n          inputValue = _this$state.inputValue,\n          isLoading = _this$state.isLoading,\n          loadedInputValue = _this$state.loadedInputValue,\n          loadedOptions = _this$state.loadedOptions,\n          passEmptyOptions = _this$state.passEmptyOptions;\n      var options = passEmptyOptions ? [] : inputValue && loadedInputValue ? loadedOptions : defaultOptions || [];\n      return React.createElement(SelectComponent, _extends({}, props, {\n        ref: function ref(_ref) {\n          _this3.select = _ref;\n        },\n        options: options,\n        isLoading: isLoading || isLoadingProp,\n        onInputChange: this.handleInputChange\n      }));\n    };\n\n    return Async;\n  }(Component), _class.defaultProps = defaultProps, _temp;\n};\n\nvar SelectState = manageState(Select);\nvar Async = makeAsyncSelect(SelectState);\nexport default Async;\nexport { defaultProps, makeAsyncSelect };","map":null,"metadata":{},"sourceType":"module"}